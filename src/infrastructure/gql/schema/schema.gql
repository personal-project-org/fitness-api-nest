# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type ExerciseObjectType {
  id: String!
  name: String!
  type: String!
  body_part: String!
}

type SetObjectType {
  id: String!
  reps: Float!
  weight: Float!
  date: DateTime!
  exerciseId: String!
  accountId: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type FoodObjectType {
  id: String!
  name: String!
  calories: String!
  protein: String!
  carbs: String!
  fats: String!
}

type AccountObjectType {
  id: String!
  username: String!
  password: String!
  calorie_goal: Float
  protein_goal: Float
  carb_goal: Float
  fat_goal: Float
}

type CaloricBalanceFactorObjectType {
  id: String!
  accountId: String!
  exerciseId: String
  date: DateTime!
  balanceFactorType: String!
  caloriesBurned: Float
  caloriesConsumed: Float
  protein: Float
  carbs: Float
  fat: Float
}

type Query {
  getAllExercises: [ExerciseObjectType!]!
  getAllFoods: [FoodObjectType!]!
  getAllSets: [SetObjectType!]!
  getAllAccounts: [AccountObjectType!]!
}

type Mutation {
  """Removes many exercises given an array of ids."""
  deleteExercises(input: DeleteExercisesInput!): Float!

  """Updates an exercise."""
  updateExercise(input: UpdateExerciseInput!): ExerciseObjectType!

  """Creates a new exercise."""
  createExercise(input: CreateExerciseInput!): ExerciseObjectType!

  """Logs a new food."""
  createFood(input: CreateFoodInput!): FoodObjectType!

  """Removes foods given an array of ids."""
  deleteFoods(input: DeleteFoodInput!): Float!

  """Removes foods given an array of ids."""
  updateFood(input: UpdateFoodInput!): FoodObjectType!

  """Logs a new set of any given exercise."""
  createSet(input: CreateSetInput!): SetObjectType!
  updateSet(input: UpdateSetInput!): SetObjectType!
  deleteSets(input: DeleteSetInput!): Float!

  """Registers a new user account."""
  createAccount(input: CreateAccountInput!): AccountObjectType!

  """Updates an account."""
  updateAccount(input: UpdateAccountInput!): AccountObjectType!

  """Deletes a user account."""
  deleteAccount(input: DeleteAccountInput!): AccountObjectType!

  """Creates a new caloricBalanceFactor."""
  createCaloricBalanceFactor(input: CreateCaloricBalanceFactorInput!): CaloricBalanceFactorObjectType!

  """Removes many caloricBalanceFactors that match a specified criteria."""
  deleteCaloricBalanceFactors(input: DeleteCaloricBalanceFactorsInput!): Float!
}

input DeleteExercisesInput {
  ids: [String!]!
}

input UpdateExerciseInput {
  id: String!
  name: String!
  type: String!
  body_part: String!
}

input CreateExerciseInput {
  name: String!
  type: String!
  body_part: String!
}

input CreateFoodInput {
  name: String!
  calories: String!
  protein: String!
  carbs: String!
  fats: String!
}

input DeleteFoodInput {
  ids: [String!]!
}

input UpdateFoodInput {
  id: String!
  name: String!
  calories: String!
  protein: String!
  carbs: String!
  fats: String!
}

input CreateSetInput {
  reps: Float!
  weight: Float
  date: DateTime!
  exerciseId: String!
  accountId: String!
}

input UpdateSetInput {
  id: String!
  reps: Float
  weight: Float
  date: DateTime
  exerciseId: String!
}

input DeleteSetInput {
  ids: [String!]!
}

input CreateAccountInput {
  username: String!
  password: String!
  calorie_goal: Float
  protein_goal: Float
  carb_goal: Float
  fat_goal: Float
}

input UpdateAccountInput {
  id: String!
  username: String
  password: String!
  new_password: String
  calorie_goal: Float
  protein_goal: Float
  carb_goal: Float
  fat_goal: Float
}

input DeleteAccountInput {
  id: String!
  password: String!
}

input CreateCaloricBalanceFactorInput {
  accountId: String!
  exerciseId: String
  date: DateTime!
  balanceFactorType: String!
  caloriesBurned: Float
  caloriesConsumed: Float
  protein: Float
  carbs: Float
  fat: Float
}

input DeleteCaloricBalanceFactorsInput {
  accountId: String!
  ids: [String!]
  startingFrom: DateTime
  endingWith: DateTime
  balanceFactorType: String
}